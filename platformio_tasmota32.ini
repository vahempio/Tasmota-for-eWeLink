; ***              ESP32 Tasmota version                 ***

[esp32_defaults]
build_unflags               = ${esp_defaults.build_unflags}
                              -Wswitch-unreachable
                              -Wstringop-overflow
                              -Wincompatible-pointer-types
                              -Wnonnull-compare
                              -fexceptions
                              -fno-lto
                              -Wpointer-arith
build_flags                 = ${esp_defaults.build_flags}
                              -Wno-switch-unreachable
                              -Wno-stringop-overflow
                              -fno-exceptions
                              -flto
                              -DBUFFER_LENGTH=128
                              -DHTTP_UPLOAD_BUFLEN=2048
                              -DMQTT_MAX_PACKET_SIZE=1200
                              -Duint32=uint32_t
                              -Duint16=uint16_t
                              -Duint8=uint8_t
                              -Dsint8_t=int8_t
                              -Dsint32_t=int32_t
                              -Dsint16_t=int16_t
                              -Dmemcpy_P=memcpy
                              -Dmemcmp_P=memcmp
                              ;for TLS we can afford compiling for 4K RSA keys
                              -DUSE_4K_RSA
                              -I$PROJECT_DIR/include
                              -include "sdkconfig.h"
                              -include "esp32x_fixes.h"
                              ; wrappers for the crash-recorder
                              -Wl,--wrap=panicHandler -Wl,--wrap=xt_unhandled_exception
                              -Wl,--wrap=_Z11analogWritehi  ; `analogWrite(unsigned char, int)` use the Tasmota version of analogWrite for deeper integration and phase control
extra_scripts               = pre:pio-tools/add_c_flags.py
                              post:pio-tools/post_esp32.py
                              ${esp_defaults.extra_scripts}

[core32]
platform                    = https://github.com/tasmota/platform-espressif32/releases/download/v.2.0.3/platform-espressif32-v.2.0.3.zip
platform_packages           =
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}


[core32solo1]
platform                    = https://github.com/tasmota/platform-espressif32/releases/download/v.2.0.3/platform-espressif32-solo1-v.2.0.3.zip
platform_packages           =
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}

[core32itead]
platform                    = https://github.com/tasmota/platform-espressif32/releases/download/v.2.0.3/platform-espressif32-solo1-v.2.0.3.zip
platform_packages           = framework-arduinoespressif32 @ https://github.com/tasmota/esp32-arduino-lib-builder/releases/download/v2.0.3/framework-arduinoespressif32-itead.tar.gz
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}